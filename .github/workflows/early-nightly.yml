name: Early Branch - Nightly Build

on:
  push:
    branches: [ early ]
  pull_request:
    branches: [ early ]
  schedule:
    # Run nightly at 3 AM UTC
    - cron: '0 3 * * *'

permissions:
  contents: write
  pull-requests: read

jobs:
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    strategy:
      matrix:
        php-version: ['8.1', '8.2', '8.3']
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup PHP ${{ matrix.php-version }}
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-version }}
          extensions: mbstring, intl, gd, xml, dom, json, fileinfo, curl, zip, iconv
          tools: composer:v2
          
      - name: Get Composer Cache Directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT
        
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-
          
      - name: Validate composer.json and composer.lock
        run: composer validate --strict
        
      - name: Install dependencies
        run: composer install --prefer-dist --no-progress --no-suggest
        
      - name: Run PHPStan
        run: vendor/bin/phpstan analyse --memory-limit=2G
        
      - name: Check PHP CS Fixer (dry-run)
        run: vendor/bin/php-cs-fixer fix --dry-run --diff --verbose

  build-nightly:
    name: Build Nightly Release
    runs-on: ubuntu-latest
    needs: code-quality
    if: github.event_name == 'push' && github.ref == 'refs/heads/early'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1'
          extensions: mbstring, intl, gd, xml, dom, json, fileinfo, curl, zip, iconv
          tools: composer:v2
          
      - name: Install dependencies
        run: composer install --prefer-dist --no-dev --no-progress --optimize-autoloader
        
      - name: Update build metadata
        run: |
          BUILD_DATE=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
          COMMIT_HASH=$(git rev-parse --short HEAD)
          
          # Update meta.json with build info
          cat > public/meta.json << EOF
          {
              "name": "Flute CMS",
              "version": "0.2.0-dev",
              "build_date": "$BUILD_DATE",
              "commit_hash": "$COMMIT_HASH",
              "branch": "early",
              "environment": "development"
          }
          EOF
          
      - name: Create archive
        run: |
          BUILD_DATE=$(date +"%Y%m%d")
          COMMIT_HASH=$(git rev-parse --short HEAD)
          ARCHIVE_NAME="flute-cms-dev-${BUILD_DATE}-${COMMIT_HASH}.zip"
          
          zip -r "$ARCHIVE_NAME" . \
            -x "*.git*" \
            -x "*.github*" \
            -x "tests/*" \
            -x "*.md" \
            -x "phpstan.neon" \
            -x ".php-cs-fixer.*"
            
          echo "ARCHIVE_NAME=$ARCHIVE_NAME" >> $GITHUB_ENV
          echo "BUILD_DATE=$BUILD_DATE" >> $GITHUB_ENV
          echo "COMMIT_HASH=$COMMIT_HASH" >> $GITHUB_ENV
          
      - name: Delete previous dev release
        continue-on-error: true
        run: |
          gh release delete dev --yes
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Create/Update dev pre-release
        run: |
          RELEASE_NOTES="## üöß Development Build (Early Branch)
          
          **‚ö†Ô∏è This is an unstable development build - use at your own risk!**
          
          ### Build Information
          - **Build Date**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          - **Commit**: \`$COMMIT_HASH\` 
          - **Branch**: \`early\`
          
          ### What's New
          - Latest development features and fixes
          - Includes all recent commits from early branch
          
          ### Installation
          1. Download \`$ARCHIVE_NAME\`
          2. Extract to your web server
          3. Run \`php flute migrate\` to apply database changes
          4. Clear cache if upgrading
          
          ### Support
          - Report issues: [GitHub Issues](https://github.com/Flute-CMS/cms/issues)
          - Community: [Discord](https://discord.gg/BcBMeVJJsd)
          
          ---
          *This release is automatically generated from the latest early branch commits.*"
          
          gh release create dev \
            --title "Development Build ($(date +%Y-%m-%d))" \
            --notes "$RELEASE_NOTES" \
            --prerelease \
            --target early \
            "$ARCHIVE_NAME"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
