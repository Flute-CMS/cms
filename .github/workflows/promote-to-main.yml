name: Promote to Main - Stable Release

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      release_notes:
        description: 'Release notes (optional - will auto-generate if empty)'
        required: false
        type: string

permissions:
  contents: write
  pull-requests: write

jobs:
  promote-to-stable:
    name: Promote Early to Main
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout early branch
        uses: actions/checkout@v4
        with:
          ref: early
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1'
          extensions: mbstring, intl, gd, xml, dom, json, fileinfo, curl, zip, iconv
          tools: composer:v2
          
      - name: Install dependencies
        run: composer install --prefer-dist --no-progress --no-suggest
        
      - name: Run full test suite
        run: |
          # PHPStan analysis
          vendor/bin/phpstan analyse --memory-limit=2G
          
          # PHP CS Fixer check
          if ! vendor/bin/php-cs-fixer check --dry-run; then
            echo "‚ùå Code style issues found. Please run php-cs-fixer fix before promoting."
            exit 1
          fi
          
          # TODO: Add actual PHPUnit tests when available
          # vendor/bin/phpunit
          
      - name: Calculate new version
        id: version
        run: |
          # Get current version from composer.json
          CURRENT_VERSION=$(grep '"version"' composer.json | sed 's/.*"version": "\(.*\)",/\1/' | sed 's/-dev//')
          
          # Parse version components
          IFS='.' read -r major minor patch <<< "$CURRENT_VERSION"
          
          # Bump version based on input
          case "${{ inputs.version_type }}" in
            "major")
              major=$((major + 1))
              minor=0
              patch=0
              ;;
            "minor")
              minor=$((minor + 1))
              patch=0
              ;;
            "patch")
              patch=$((patch + 1))
              ;;
          esac
          
          NEW_VERSION="${major}.${minor}.${patch}"
          
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "version_tag=v$NEW_VERSION" >> $GITHUB_OUTPUT
          
          echo "üì¶ Version bump: $CURRENT_VERSION ‚Üí $NEW_VERSION"
          
      - name: Update version files
        run: |
          NEW_VERSION="${{ steps.version.outputs.new_version }}"
          BUILD_DATE=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
          COMMIT_HASH=$(git rev-parse --short HEAD)
          
          # Update composer.json
          sed -i 's/"version": ".*"/"version": "'$NEW_VERSION'"/' composer.json
          
          # Update App.php
          sed -i "s/VERSION = '.*';/VERSION = '$NEW_VERSION';/" app/Core/App.php
          
          # Update meta.json
          cat > public/meta.json << EOF
          {
              "name": "Flute CMS",
              "version": "$NEW_VERSION",
              "build_date": "$BUILD_DATE",
              "commit_hash": "$COMMIT_HASH",
              "branch": "main",
              "environment": "production"
          }
          EOF
          
      - name: Generate changelog
        id: changelog
        run: |
          NEW_VERSION="${{ steps.version.outputs.new_version }}"
          
          # Get commits since last tag
          LAST_TAG=$(git tag --sort=-version:refname | head -n 1)
          if [ -z "$LAST_TAG" ]; then
            COMMIT_RANGE="HEAD"
          else
            COMMIT_RANGE="${LAST_TAG}..HEAD"
          fi
          
          # Generate changelog entry
          CHANGELOG_ENTRY="## [$NEW_VERSION] - $(date +%Y-%m-%d)
          
          ### Added
          $(git log $COMMIT_RANGE --oneline --grep="feat" --pretty="- %s" | head -10)
          
          ### Changed
          $(git log $COMMIT_RANGE --oneline --grep="fix\|refactor\|update" --pretty="- %s" | head -10)
          
          ### Infrastructure
          $(git log $COMMIT_RANGE --oneline --grep="ci\|build\|chore" --pretty="- %s" | head -5)
          "
          
          # Prepend to CHANGELOG.md
          if [ -f CHANGELOG.md ]; then
            # Insert after "## [Unreleased]" section
            awk -v entry="$CHANGELOG_ENTRY" '
              /^## \[Unreleased\]/ {
                print $0
                print ""
                print entry
                next
              }
              { print }
            ' CHANGELOG.md > CHANGELOG.tmp && mv CHANGELOG.tmp CHANGELOG.md
          fi
          
          # Set output for release notes
          if [ -n "${{ inputs.release_notes }}" ]; then
            echo "release_notes=${{ inputs.release_notes }}" >> $GITHUB_OUTPUT
          else
            echo "release_notes<<EOF" >> $GITHUB_OUTPUT
            echo "$CHANGELOG_ENTRY" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi
          
      - name: Commit version changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          git add composer.json app/Core/App.php public/meta.json CHANGELOG.md
          git commit -m "chore: bump version to ${{ steps.version.outputs.new_version }}"
          
      - name: Merge to main
        run: |
          # Switch to main and merge early
          git fetch origin main:main
          git checkout main
          git merge early --no-ff -m "Release ${{ steps.version.outputs.new_version }}"
          
      - name: Create and push tag
        run: |
          git tag -a "${{ steps.version.outputs.version_tag }}" -m "Release ${{ steps.version.outputs.new_version }}"
          git push origin main
          git push origin "${{ steps.version.outputs.version_tag }}"
          
      - name: Build production archive
        run: |
          # Clean install for production
          rm -rf vendor
          composer install --prefer-dist --no-dev --no-progress --optimize-autoloader
          
          VERSION_TAG="${{ steps.version.outputs.version_tag }}"
          ARCHIVE_NAME="flute-cms-${VERSION_TAG}.zip"
          
          zip -r "$ARCHIVE_NAME" . \
            -x "*.git*" \
            -x "*.github*" \
            -x "tests/*" \
            -x "*.md" \
            -x "phpstan.neon" \
            -x ".php-cs-fixer.*" \
            -x "composer.lock"
            
          echo "ARCHIVE_NAME=$ARCHIVE_NAME" >> $GITHUB_ENV
          
      - name: Create GitHub Release
        run: |
          VERSION_TAG="${{ steps.version.outputs.version_tag }}"
          NEW_VERSION="${{ steps.version.outputs.new_version }}"
          
          RELEASE_NOTES="## üéâ Flute CMS $NEW_VERSION
          
          ${{ steps.changelog.outputs.release_notes }}
          
          ### üì• Installation
          
          1. **New Installation:**
             - Download \`$ARCHIVE_NAME\`
             - Extract to your web server directory
             - Run installation wizard
          
          2. **Upgrade from previous version:**
             - Backup your current installation
             - Download and extract \`$ARCHIVE_NAME\`
             - Run \`php flute migrate\` to update database
             - Clear application cache
          
          ### üìñ Documentation
          - [Installation Guide](https://docs.flute-cms.com/installation)
          - [Upgrade Guide](https://docs.flute-cms.com/upgrade)
          - [Full Documentation](https://docs.flute-cms.com)
          
          ### üÜò Support
          - [GitHub Issues](https://github.com/Flute-CMS/cms/issues)
          - [Discord Community](https://discord.gg/BcBMeVJJsd)
          - [Official Website](https://flute-cms.com)
          
          ### ‚ö†Ô∏è Requirements
          - PHP 8.1 or higher
          - MySQL 5.7+ or PostgreSQL 10+
          - Web server (Apache/Nginx)
          
          ---
          **Full Changelog**: https://github.com/Flute-CMS/cms/compare/${{ github.sha }}...$VERSION_TAG"
          
          gh release create "$VERSION_TAG" \
            --title "Flute CMS $NEW_VERSION" \
            --notes "$RELEASE_NOTES" \
            --latest \
            "$ARCHIVE_NAME"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Fast-forward merge back to early
        run: |
          # Merge main back to early to keep branches in sync
          git checkout early
          git merge main --ff-only
          git push origin early
          
      - name: Update early version to next dev
        run: |
          # Bump version to next dev version
          CURRENT_VERSION="${{ steps.version.outputs.new_version }}"
          IFS='.' read -r major minor patch <<< "$CURRENT_VERSION"
          
          # Next minor dev version
          minor=$((minor + 1))
          NEXT_DEV_VERSION="${major}.${minor}.0-dev"
          
          # Update version files
          sed -i 's/"version": ".*"/"version": "'$NEXT_DEV_VERSION'"/' composer.json
          sed -i "s/VERSION = '.*';/VERSION = '$NEXT_DEV_VERSION';/" app/Core/App.php
          
          # Update meta.json for dev
          cat > public/meta.json << EOF
          {
              "name": "Flute CMS",
              "version": "$NEXT_DEV_VERSION",
              "build_date": "",
              "commit_hash": "",
              "branch": "early",
              "environment": "development"
          }
          EOF
          
          # Commit and push
          git add composer.json app/Core/App.php public/meta.json
          git commit -m "chore: bump to next dev version $NEXT_DEV_VERSION"
          git push origin early
